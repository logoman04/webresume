{"version":3,"sources":["logo.svg","components/Language.js","static/data/language_data.js","components/LanguageContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Language","props","stars","i","language","level","push","react_default","a","createElement","Col","xs","name","map","Image","src","logo","fluid","languages","LanguageContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Container","lang","Row","components_Language","Component","App","components_LanguageContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4MCuBzBC,EAnBE,SAACC,GAEjB,IADA,IAAIC,EAAQ,GACJC,EAAE,EAAGA,EAAEF,EAAMG,SAASC,MAAOF,IACpCD,EAAMI,KAAKH,GAGZ,MAAO,CACNI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GACPV,EAAMG,SAASQ,MAEjBL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GACPT,EAAMW,IAAI,SAAAV,GAAC,MAAI,OAEjBI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GACRJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,IAAKd,EAAMG,SAASY,KAAMC,OAAK,uBCV1BC,EARG,CACjB,CACCN,KAAQ,SACRP,MAAS,EACTW,KAAQ,+EC0BKG,cApBd,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMtB,KACD0B,MAAQ,CACZT,UAAWA,GAHME,wEAQlB,OACCb,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACEL,KAAKI,MAAMT,UAAUL,IAAI,SAAAgB,GAAI,OAC7BtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACCvB,EAAAC,EAAAC,cAACsB,EAAD,CAAU3B,SAAUyB,eAbMG,aCIjBC,MARf,WACE,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECRNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.31ec48ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Language.js is a functional component for displaying a language\nimport React from 'react';\nimport { Container, Row, Col, Image } from 'react-bootstrap';\n\nconst Language = (props) => {\n\tlet stars = []\n\tfor(let i=0; i<props.language.level; i++) {\n\t\tstars.push(i);\n\t}\n\n\treturn [\n\t\t<Col xs={4}>\n\t\t\t{props.language.name}\n\t\t</Col>,\n\t\t<Col xs={4}>\n\t\t\t{stars.map(i => '*')}\n\t\t</Col>,\n\t\t<Col xs={4}>\n\t\t\t<Image src={props.language.logo} fluid/>\n\t\t</Col>\n\t];\n}\n\nexport default Language;","const languages = [\n\t{\n\t\t'name': 'python',\n\t\t'level': 5,\n\t\t'logo': 'https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg'\n\t}\n]\n\nexport default languages;","// LanguageContainer.js is a component that \n// displays info about the languages I know\n\nimport React, { Component } from 'react';\nimport Language from './Language';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport languages from '../static/data/language_data'\n\n\nclass LanguageContainer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlanguages: languages\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t{this.state.languages.map(lang => (\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Language language={lang} />\n\t\t\t\t\t</Row>\n\t\t\t\t))}\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\nexport default LanguageContainer;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LanguageContainer from './components/LanguageContainer';\n\nfunction App() {\n  return (\n    <div>\n      <LanguageContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// React bootstrap css imports\nimport 'bootstrap/dist/css/bootstrap.css';\n// import 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}